!function(e){var t={};function n(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(s,o,function(t){return e[t]}.bind(null,o));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class s{constructor(e,t){this.word=e.toLowerCase().split(""),this.guessLeft=t,this.guess=[],this.condition="playing"}get Puzzle(){let e="";return this.word.forEach(t=>{this.guess.includes(t)||" "===t?e+=t:e+="*"}),e}get StatusMessage(){return"playing"===this.condition?"Guess Left : "+this.guessLeft:"failed"===this.condition?`Nice Try! The Word is " ${this.word.join("")} "`:"Congratulations,You Won!"}status(){const e=this.word.every(e=>this.guess.includes(e)||" "===e);return 0===this.guessLeft?this.condition="failed":this.condition=e?"finished":"playing",this.condition}guessPuzzle(e){e=e.toLowerCase();const t=!this.guess.includes(e),n=!this.word.includes(e);"playing"===this.condition&&(t&&!n?this.guess=[...this.guess,e]:t&&n&&this.guessLeft--,this.status())}}const o=document.querySelector("#guess"),r=document.querySelector("#status");let i;window.addEventListener("keypress",e=>{const t=String.fromCharCode(e.charCode);i.guessPuzzle(t),u()});const u=()=>{o.innerHTML="",i.Puzzle.split("").forEach(e=>{const t=document.createElement("span");t.textContent=e,o.appendChild(t)}),r.textContent=i.StatusMessage},c=async()=>{const e=await(async()=>{const e=await fetch("/puzzle");if(200===e.status){return(await e.json()).puzzle}throw new Error("Unable to get puzzle")})();i=new s(e,8),u()};document.querySelector("#reset").addEventListener("click",c),c()}]);
//# sourceMappingURL=bundle.js.map